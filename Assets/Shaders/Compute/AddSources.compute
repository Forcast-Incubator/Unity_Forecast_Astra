#pragma kernel AddFluidSources

#define threads_per_group_x 8
#define threads_per_group_y 8
#define threads_per_group_z 8

#define findID(mapX, mapY, mapZ) ((mapX) + ((mapY) * totalThreadsY) + ((mapZ) * totalThreadsX * totalThreadsY))

struct source
{
	float3 position;
	float3 velocity;
};

float timeStep;

RWStructuredBuffer<float3> flowBuffer;	// array of vectors
RWStructuredBuffer<source> fluidSourcesBuffer;

int numThreadGroupsX;	// total number of thread groups
int numThreadGroupsY;	// total number of thread groups
int numThreadGroupsZ;	// total number of thread groups

[numthreads(threads_per_group_x, threads_per_group_y, threads_per_group_z)]
void AddFluidSources(uint3 dispatchID : SV_DispatchThreadID)
{
	// calculate total threads in the each dimension of whole box volume
	int totalThreadsX = threads_per_group_x * numThreadGroupsX;
	int totalThreadsY = threads_per_group_y * numThreadGroupsY;
	int totalThreadsZ = threads_per_group_z * numThreadGroupsZ;

	int totalThreads = totalThreadsX * totalThreadsY * totalThreadsZ;

	int cellID = findID(dispatchID.x, dispatchID.y, dispatchID.z);

	flowBuffer[cellID] += 0;
}